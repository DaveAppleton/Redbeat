Still Going Strong
7 April 2021

Dave Appleton
Blockchain Consultant
calistralabs@gmail.com
https://sorry.af
Twitter @AppletonDave

* Session 5 / 6

.image images/ToBill.png 300 _

.image images/FromBill.png 200 _



* Arrays vs slices

- Array is fixed length

   var myArray  [5]int
   yourArray := [5]int{5,4,3,2,1}
   myArray[2] = 17
   myArray[1] = yourArray[2]

- Slice is dynamic

  mySlice := []int{}
  mySlice := append(mySlice,21)

  yourSlice := make([]int,15)
  yourSlice[3] = 12

* Working with Arrays and slices

Arrays
.play power_3/code400.go
Slices
.play power_3/code401.go

* Working with Arrays

.play -edit power_3/code402.go

* Working with Slices

.play -edit power_3/code403.go

* Slices 

- Slices require initialisation
- Slices can grow
- You can append two slices ...

.play -edit power_3/code404.go

* Slices to Arrays and Back

.play -edit power_3/code405.go /start OMIT/,/end OMIT/

* Defined struct vs anonymous struct

.play -edit power_3/code406.go /start OMIT/,/end OMIT/

* interfaces

.code power_3/code407.go /start OMIT/,/plain OMIT/

* interfaces #2

.play -edit power_3/code407.go /gen OMIT/,/end OMIT/

* Sort - uses an interface

.play -edit power_3/code408.go  /start OMIT/,/end OMIT/

try changing the "<" to ">" in the less function

* Sort - why the interface is important

.play -edit power_3/code409.go  /start OMIT/,/mid OMIT/

(please do not run until you have been to next page)

* Sort - any more bids ?

.play -edit power_3/code409.go  /mid OMIT/,/end OMIT/

Why not 
- go back a page and mess with the "Less" function?
- mess with the values and re-run?
note: two separate instances of the code

* exported and non exported items : datasupply part I

.code power_2_project_2/datasupply/ds.go /start OMIT/,/bid OMIT/

- Bid, it's fields and NewBid are visible / assignable outside this package

* exported and non exported items : datasupply part II

.code power_2_project_2/datasupply/ds.go /bid OMIT/,/end OMIT/
- hBid's contents are NOT assignable outside this package
- hBid can only be obtained via NewHBid outside the package

* exported and non exported items : consuming datasupply

.code power_2_project_2/main.go

* the results

Notice
- you cannot instantiate an uncapitalised struct from a different package

  j := datasupply.hBid{}  // cannot refer to unexported name datasupply.hBid

- you cannot assign to uncapitalised fields inside a struct that come from another package

  myHRequest.age = 19  // cannot refer to unexported field or method age

- results

  datasupply.Bid {23 54 autogenerated}
  datasupply.Bid {32 23 }
  *datasupply.hBid &{100 99}
  ok ok, I'm doing it 99


* consuming a public API 

[[https://docs.openexchangerates.org/docs/][OpenExchangeRates https://openexchangerates.org/]]

- OpenExchangeRates have an API that gives international exchange rates.
- sign up for the public tier on their platform
- check out `/latest.json`

Let's get the SGD - MYR exchange rate.

* latest.json

Query Params

  app_id:	stringRequired
  Your unique App ID

  base:	stringOptional
  Change base currency (3-letter code, default: USD)

  symbols:	stringOptional
  Limit results to specific currencies (comma-separated list of 3-letter codes)

  prettyprint:	booleanOptional
  Set to false to reduce response size (removes whitespace)

  show_alternative:	booleanOptional
  Extend returned values with alternative, black market and digital currency rates

* Example

HTTP GET

  https://openexchangerates.org/api/latest.json?app_id=YOUR_APP_ID

Response (partial)

  200 OK

  {
    disclaimer: "https://openexchangerates.org/terms/",
    license: "https://openexchangerates.org/license/",
    timestamp: 1449877801,
    base: "USD",
    rates: {
        AED: 3.672538,
        AFN: 66.809999,
        ALL: 125.716501,
        AMD: 484.902502,
        ANG: 1.788575,
        AOA: 135.295998,
        ARS: 9.750101,
        AUD: 1.390866,
        /* ... */
    }
  }

* Let's consume the OpenExchangeRates data...

use viper / config.json to avoid exposing keys in code

we will create the project with an "oex" subdirectory that will hold the openexchangerates code

The package will be oex

  package oex

* The init() function

one new import

  "github.com/shopspring/decimal"

.code power_3_project/oex/oex.go /start OMIT/,/p1 OMIT/

  func init() // is automatically run first

* Data structures

.code power_3_project/oex/oex.go /p1 OMIT/,/p2 OMIT/


* the GetLatest function (part I)

.code power_3_project/oex/oex.go /p2 OMIT/,/p3 OMIT/

* the GetLatest function (part II)

.code power_3_project/oex/oex.go /p3 OMIT/,/end OMIT/

* The Test file

.code power_3_project/oex/oex_test.go 

* That works - let's start the main code

.code power_3_project/main_001.go


* But I really want to write it to a database

.image images/postgres_and_admin.png 150 _
.image images/postgres.png 150 _

Open PSQL to create a database and table

* PSQL

  Last login: Mon Apr  5 19:54:39 on ttys007
  '/Applications/Postgres.app/Contents/Versions/9.5/bin'/psql -p5432
  ~ ·êÖ '/Applications/Postgres.app/Contents/Versions/9.5/bin'/psql -p5432
  psql (9.5.4)
  Type "help" for help.

  daveappleton=# create database redbeat;
  CREATE DATABASE
  daveappleton=# \c redbeat
  You are now connected to database "redbeat" as user "daveappleton".
  redbeat=# create table exchange (
  redbeat(#     id serial   PRIMARY KEY,
  redbeat(#     source      varchar(10),
  redbeat(#     dest        varchar(10),
  redbeat(#     price       numeric(120,100),
  redbeat(#     date_sent   timestamp
  redbeat(# );
  CREATE TABLE
  redbeat=# grant select , insert , update on exchange to user; 
  GRANT
  redbeat=# grant select , usage , update on exchange_id_seq to user;
  GRANT


* database package

  package exdb

.code power_3_project/exdb/exdb.go /start OMIT/,/mid OMIT/

* database package

  package exdb

.code power_3_project/exdb/exdb.go /mid OMIT/,/end OMIT/

* The final code

.code power_3_project/main.go

* xx
grant select , insert , update on exchange to hellogold; 

grant select , usage , update on exchange_id_seq to hellogold;

